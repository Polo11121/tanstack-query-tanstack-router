/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthLayoutImport } from './routes/_authLayout'
import { Route as AuthLayoutRegisterIndexImport } from './routes/_authLayout/register/index'
import { Route as AuthLayoutLoginIndexImport } from './routes/_authLayout/login/index'
import { Route as mainPostsIndexImport } from './routes/(main)/posts/index'
import { Route as mainPostsPostIdIndexImport } from './routes/(main)/posts/$postId/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const mainAboutIndexLazyImport = createFileRoute('/(main)/about/')()

// Create/Update Routes

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_authLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const mainAboutIndexLazyRoute = mainAboutIndexLazyImport
  .update({
    id: '/(main)/about/',
    path: '/about/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(main)/about/index.lazy').then((d) => d.Route))

const AuthLayoutRegisterIndexRoute = AuthLayoutRegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutLoginIndexRoute = AuthLayoutLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const mainPostsIndexRoute = mainPostsIndexImport
  .update({
    id: '/(main)/posts/',
    path: '/posts/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(main)/posts/index.lazy').then((d) => d.Route))

const mainPostsPostIdIndexRoute = mainPostsPostIdIndexImport
  .update({
    id: '/(main)/posts/$postId/',
    path: '/posts/$postId/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() =>
    import('./routes/(main)/posts/$postId/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authLayout': {
      id: '/_authLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(main)/posts/': {
      id: '/(main)/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof mainPostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authLayout/login/': {
      id: '/_authLayout/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginIndexImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_authLayout/register/': {
      id: '/_authLayout/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthLayoutRegisterIndexImport
      parentRoute: typeof AuthLayoutImport
    }
    '/(main)/about/': {
      id: '/(main)/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof mainAboutIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/(main)/posts/$postId/': {
      id: '/(main)/posts/$postId/'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof mainPostsPostIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthLayoutRouteChildren {
  AuthLayoutLoginIndexRoute: typeof AuthLayoutLoginIndexRoute
  AuthLayoutRegisterIndexRoute: typeof AuthLayoutRegisterIndexRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginIndexRoute: AuthLayoutLoginIndexRoute,
  AuthLayoutRegisterIndexRoute: AuthLayoutRegisterIndexRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof AuthLayoutRouteWithChildren
  '/posts': typeof mainPostsIndexRoute
  '/login': typeof AuthLayoutLoginIndexRoute
  '/register': typeof AuthLayoutRegisterIndexRoute
  '/about': typeof mainAboutIndexLazyRoute
  '/posts/$postId': typeof mainPostsPostIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof AuthLayoutRouteWithChildren
  '/posts': typeof mainPostsIndexRoute
  '/login': typeof AuthLayoutLoginIndexRoute
  '/register': typeof AuthLayoutRegisterIndexRoute
  '/about': typeof mainAboutIndexLazyRoute
  '/posts/$postId': typeof mainPostsPostIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_authLayout': typeof AuthLayoutRouteWithChildren
  '/(main)/posts/': typeof mainPostsIndexRoute
  '/_authLayout/login/': typeof AuthLayoutLoginIndexRoute
  '/_authLayout/register/': typeof AuthLayoutRegisterIndexRoute
  '/(main)/about/': typeof mainAboutIndexLazyRoute
  '/(main)/posts/$postId/': typeof mainPostsPostIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/posts'
    | '/login'
    | '/register'
    | '/about'
    | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/posts' | '/login' | '/register' | '/about' | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/_authLayout'
    | '/(main)/posts/'
    | '/_authLayout/login/'
    | '/_authLayout/register/'
    | '/(main)/about/'
    | '/(main)/posts/$postId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
  mainPostsIndexRoute: typeof mainPostsIndexRoute
  mainAboutIndexLazyRoute: typeof mainAboutIndexLazyRoute
  mainPostsPostIdIndexRoute: typeof mainPostsPostIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  mainPostsIndexRoute: mainPostsIndexRoute,
  mainAboutIndexLazyRoute: mainAboutIndexLazyRoute,
  mainPostsPostIdIndexRoute: mainPostsPostIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authLayout",
        "/(main)/posts/",
        "/(main)/about/",
        "/(main)/posts/$postId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_authLayout": {
      "filePath": "_authLayout.tsx",
      "children": [
        "/_authLayout/login/",
        "/_authLayout/register/"
      ]
    },
    "/(main)/posts/": {
      "filePath": "(main)/posts/index.tsx"
    },
    "/_authLayout/login/": {
      "filePath": "_authLayout/login/index.tsx",
      "parent": "/_authLayout"
    },
    "/_authLayout/register/": {
      "filePath": "_authLayout/register/index.tsx",
      "parent": "/_authLayout"
    },
    "/(main)/about/": {
      "filePath": "(main)/about/index.lazy.tsx"
    },
    "/(main)/posts/$postId/": {
      "filePath": "(main)/posts/$postId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
